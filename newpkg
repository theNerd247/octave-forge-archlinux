#!/bin/sh
################################################################################
# downloads and updates a given octave-<pkg>'s coorespondig AUR package info
# author: drizzd
# (comments by thenerd247)
################################################################################

usage()
{
	echo "usage: $(basename $0) pack [version]" >&2
}

# fetches the given package url 
# $1 - the directory to store the downloaded files to
# $2 - the url to fetch package files from
downloadFiles()
{
	if ! wget --quiet -O "$1" "$2"
	then
		echo "error: download failed: $2"
  fi
}

sedesc()
{
	echo "$1" | sed -e 's/\(\&\|\.\|\/\|\*\|\[\|\]\|\\\)/\\&/g'
}

# returns a cooresponding AUR formatted license string given an octave formatted
# license. 
# 
# if no cooresponding license can be found then the AUR license "custom" is
# assumed.
octave_to_arch_license()
{
	case "$1" in
	"GPL version 2")
		echo GPL2
		;;
	"GPL version 2 or later" | "GPLv2+")
		echo GPL
		;;
	"GPL version 3" | "GPL version 3 or later" | "GPLv3+")
		echo GPL3
		;;
	GFDL)
		echo FDL
		;;
	BSD | GPL | GPL2 | GPL3 | LGPL)
		echo "$1"
		;;
	*)
    echo custom
		;;
	esac
}

# attemps to convert the given octave license to the 
getLicense()
{
	echo "$1" |
	sed -e 's/(see\( individual\)\? files)//' -e 's/ and /\n/g' |
	{
		first=true
		while read octlic
		do
			archlic=$(octave_to_arch_license "$octlic")

			$first || echo -n " "
			echo -n "'$archlic'"
			first=false
		done
	}
}

# handles getting the dependencies for the current package
# TODO: document this function a bit more.
get_dep() {
	assume_octave=
	optional=
	while test $# -gt 0
	do
		case $1 in
		--octave)
			assume_octave=YesPlease
			;;
		--optional) optional=YesPlease
			;;
		*)
			break
			;;
		esac
		shift
	done
	label="$1"

	sed -n "s/^$label: //p" |
	sed 's/, /\n/g' |
	{
		first=true
		while read package version
		do
			if test -n "$assume_octave" -a "$package" != octave
			then
				package=octave-$package
			else
				# Arch puts header files with the regular
				# package.
				package=$(echo "$package" | sed 's/-dev\(el\)\?$//')
			fi
			if echo "$version" | grep -q '\<optional\>'
			then
				test -n "$optional" || continue
			else
				test -z "$optional" || continue
			fi

			$first || echo -n " "
			echo -n "'$package $version'" | sed 's/ (\?optional)\?//g; s/[ ()]//g'
			first=false
		done
	}
}

# check for proper program options
if test $# -ne 1
then
	usage
	exit 1
fi

_pack=$1
pkgname=octave-$_pack
version=$2

#assuming the script is run within this directory only this should be ok
#
# TODO: make this line a bit more robust to allow users to integrate this script
# into other programs if possible.
skeldir="$(pwd)/pkgskel"

# get the version of the package. If the version is not given by the user then
# check on the internet for the most recent package information.
if test -z "$version"
then
	version=$(
		downloadFiles - "http://octave.sourceforge.net/$_pack/index.html" |
		sed -n 's/.*Package Version:.*<td>\([^<]\+\)<\/td>.*/\1/p' |
		head -1
	)
fi
if test -z "$version"
then
	echo "error: could not determine package version" >&2
	exit 1
fi

# check for the package name. 
# Don't do anything if the package already exists locally to prevent the user
# from overwriting possible changes they have made.
if test -e "$pkgname"
then
	echo "error: directory already exists: $pkgname" >&2
	exit 1
fi

# create a new package from the skeleton directory
if test $(cp -r "$skeldir" "$pkgname")
  then
    echo "aborting..."
    exit 0
  fi
cd "$pkgname"
mv "octave-pkgname.install" "$pkgname.install"

# download the package archive
_archive=$_pack-$version.tar.gz
if ! downloadFiles "$_archive" "http://downloads.sourceforge.net/octave/$_archive"
then
	exit 1
fi

# begin creating the AUR package information.
dfile=$(
	tar tzf "$_archive" |
	grep "^[^/]*\(/\)\?\<DESCRIPTION$" |
	head -n 1
)
dcontent=$(tar xzfO "$_archive" "$dfile" | sed 's/\r*$//')
description=$(
	echo "$dcontent" |
	sed -n 's/^Description: //; ta; d; :a; H; n; /^ / ba; g; s/\n//gp'
)
depends=$(echo "$dcontent" | get_dep --octave Depends)
requires_pattern='\(BuildRequires\|SystemRequirements\)';
makedepends=$(echo "$dcontent" | get_dep "$requires_pattern")
optdepends=$(echo "$dcontent" | get_dep --optional "$requires_pattern")
license=$(echo "$dcontent" | sed -n 's/^License: //p')
md5sum=$(md5sum "$_archive" | cut -f1 -d' ')

# get the license for the package
archlicense="$(getLicense "$license")"

# output our results to the users
echo "version: $version"
echo "depends: $depends"
test -n "$makedepends" && echo "makedepends: $makedepends"
test -n "$optdepends"  && echo "optdepends: $optdepends"
echo "license: $archlicense ($license)"

# Truncate the description of the package to maximum description length allowed
# by AUR
limit=255
if test $(echo -n "$description" | wc -c) -gt "$limit"
then
	description=$(echo "$description" | cut -b 1-"$(($limit-6))")
	description="$description [...]"
fi

sed \
	-e "s#@@NAME@@#$(sedesc "$_pack")#g" \
	-e "s#@@VERSION@@#$(sedesc "$version")#g" \
	-e "s#@@DESCRIPTION@@#$(sedesc "$description")#g" \
	-e "s#@@LICENSE@@#$(sedesc "$archlicense")#g" \
	-e "s#@@DEPENDS@@#$(sedesc "$depends")#g" \
	-e "s#@@MAKEDEPENDS@@#$(sedesc "$makedepends")#g" \
	-e "s#@@OPTDEPENDS@@#$(sedesc "$optdepends")#g" \
	-e "s#@@MD5SUMS@@#$(sedesc "$md5sum")#g" \
	-i PKGBUILD "$pkgname.install" #TODO: $pkgname.install should be replaced with
                                 # a variable to the cooresponding file path
